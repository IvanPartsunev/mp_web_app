{
  "tasks": {
    "api:add-deps": {
      "name": "api:add-deps",
      "steps": [
        {
          "exec": "cd mp_web_site/backend && poetry add fastapi@0.115.12 pydantic[all]@2.11.3 uvicorn@0.34.2 mangum@0.19.0 PyJWT@^2.10.1 argon2-cffi@^23.1.0 pydantic-settings@2.9.1"
        }
      ]
    },
    "api:init": {
      "name": "api:init",
      "steps": [
        {
          "exec": "cd mp_web_site/backend && poetry init -n --name mp-api --python '3.12.8'"
        }
      ]
    },
    "api:install": {
      "name": "api:install",
      "steps": [
        {
          "exec": "cd mp_web_site/backend && poetry install --no-root"
        }
      ]
    },
    "api:requirements": {
      "name": "api:requirements",
      "steps": [
        {
          "exec": "cd mp_web_site/backend && poetry export -f requirements.txt --output requirements.txt --without-hashes"
        }
      ]
    },
    "api:run": {
      "name": "api:run",
      "steps": [
        {
          "exec": "cd mp_web_site/backend && poetry run uvicorn mp_web_site.backend.api:app --reload --port 8001"
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "cdk:deploy": {
      "name": "cdk:deploy",
      "steps": [
        {
          "exec": "poetry run cdk deploy"
        }
      ]
    },
    "cdk:diff": {
      "name": "cdk:diff",
      "steps": [
        {
          "exec": "poetry run cdk diff"
        }
      ]
    },
    "cdk:synth": {
      "name": "cdk:synth",
      "steps": [
        {
          "exec": "poetry run cdk synth"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "python .projenrc.py"
        }
      ]
    },
    "deploy:all": {
      "name": "deploy:all",
      "steps": [
        {
          "exec": "npx projen api:requirements && npx projen cdk:deploy"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install dependencies and update lockfile",
      "steps": [
        {
          "exec": "poetry update"
        }
      ]
    },
    "install:all": {
      "name": "install:all",
      "steps": [
        {
          "exec": "poetry install && npx projen api:install"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install dependencies with frozen lockfile",
      "steps": [
        {
          "exec": "poetry check --lock && poetry install"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "poetry build"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish": {
      "name": "publish",
      "description": "Uploads the package to PyPI.",
      "steps": [
        {
          "exec": "poetry publish"
        }
      ]
    },
    "publish:test": {
      "name": "publish:test",
      "description": "Uploads the package against a test PyPI endpoint.",
      "steps": [
        {
          "exec": "poetry publish -r testpypi"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "pytest"
        }
      ]
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(poetry env info -p || poetry run poetry env info -p)",
    "PATH": "$(echo $(poetry env info -p)/bin:$PATH)"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \"npx projen\"."
}
